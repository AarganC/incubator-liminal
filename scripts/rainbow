#!/usr/bin/env python3

#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required bgit y applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
import os
import shutil
import site
import sys

import click
from rainbow.build import build_rainbows
import subprocess
from rainbow.core import environment
from rainbow.core.util import files_util


@click.group()
def cli():
    pass


def docker_is_running():
    try:
        return not subprocess.check_output("docker info >/dev/null 2>&1", shell=True)
    except subprocess.CalledProcessError as e:
        msg = "Docker is not running. Please start docker service on your machine\n"
        sys.stderr.write(f"ERROR: {msg}")
        raise RuntimeError(msg)


@cli.command("build", short_help="builds dockers from your business logic")
@click.option('--path', default=os.getcwd(), help='Build within this path.')
def build(path):
    click.echo(f'Building rainbows in {path}')
    if docker_is_running():
        build_rainbows.build_rainbows(path)


def deploy_rainbow_core_internal():
    click.echo("WARN: refreshing rainbow core package")
    rainbow_home = environment.get_rainbow_home()
    subprocess.call([f'package.sh {rainbow_home}'], shell=True)


@cli.command("deploy", short_help="deploys your rainbow.yaml files to $RAINBOW_HOME folder")
@click.option('--path', default=os.getcwd(), help="folder containing rainbow.yaml files")
def deploy_rainbows(path):
    click.echo("deploying rainbow yaml files")
    rainbow_home = environment.get_rainbow_home()
    os.makedirs(rainbow_home, exist_ok=True)
    os.makedirs(environment.get_dags_dir(), exist_ok=True)
    deploy_rainbow_core_internal()
    config_files = files_util.find_config_files(path)
    for config_file in config_files:
        click.echo(f"deploying rainbow file: {config_file}")
        yml_name = os.path.basename(config_file)
        target_yml_name = os.path.join(environment.get_dags_dir(), yml_name)
        shutil.copyfile(config_file, target_yml_name)


@cli.command("start", short_help="starts a local airflow in docker compose. should be run after deploy. " +
                                 "Make sure docker is running on your machine")
def start():
    if docker_is_running():
        # initialize rainbow home by default
        environment.get_rainbow_home()
        result = subprocess.call([f'docker-compose -f "{environment.get_rainbow_home()}/docker-compose.yml" up'],
                                 env=os.environ, shell=True)


if __name__ == '__main__':
    cli()
